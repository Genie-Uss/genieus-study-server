name: CI/CD for Monolith on GCP

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      REPOSITORY: ${{ secrets.GCP_REPOSITORY }}
      CONTAINER_NAME: ${{ secrets.GCP_CONTAINER_NAME }}
      # 이미지 경로 형식 수정
      IMAGE_PATH: "${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/${{ secrets.GCP_CONTAINER_NAME }}"

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 빌드
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test --no-daemon

      # 4. Google Cloud 인증
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 5. Google Cloud SDK 설정
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # 6. Docker를 GCP Artifact Registry와 통신하도록 구성
      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      # 7. Docker 이미지 빌드 및 푸시 - 태그 형식 수정
      - name: Build and Push Docker image
        run: |
          # 디버깅을 위해 이미지 경로 출력
          echo "Building image: ${{ env.IMAGE_PATH }}:latest"
          # 올바른 태그 형식으로 빌드 및 푸시
          docker build -t "${{ env.IMAGE_PATH }}:latest" .
          docker push "${{ env.IMAGE_PATH }}:latest"

      # 8. VM에 SSH 접속하여 배포
      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_SSH_KEY }}
          debug: true
          envs: GCP_REGION,GCP_PROJECT_ID,REPOSITORY,CONTAINER_NAME,IMAGE_PATH
          script: |
            # 배포 스크립트 디버깅
            echo "Deploying container: ${CONTAINER_NAME}"
            echo "Using image: ${IMAGE_PATH}:latest"
            
            # 프로젝트 디렉토리로 이동
            cd ~/projects
            
            # 서비스 계정 인증 (필요한 경우)
            gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev --quiet
            
            # 명시적으로 이미지 가져오기
            echo "Pulling image..."
            docker pull "${IMAGE_PATH}:latest"
            
            # 기존 컨테이너 종료 및 제거
            echo "Stopping and removing existing container if any..."
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true
            
            # 사용하지 않는 이미지 정리
            echo "Cleaning up unused images..."
            docker image prune -af --filter "until=24h" || true
            
            # .env 파일에서 앱 포트 읽기 (디버깅 추가)
            if [ -f .env ]; then
              APP_SERVER_PORT=$(grep APP_SERVER_PORT .env | cut -d '=' -f2 || echo "8080")
              echo ".env file found. APP_SERVER_PORT=${APP_SERVER_PORT}"
            else
              APP_SERVER_PORT=8080
              echo ".env file not found, using default port 8080"
            fi
            
            # 새 컨테이너 실행 (명시적 네트워크 확인)
            echo "Starting new container on port ${APP_SERVER_PORT}..."
            
            # 네트워크 존재 여부 확인 및 생성
            NETWORK_NAME=${{ secrets.APP_DOCKER_NETWORK }}
            if ! docker network inspect ${NETWORK_NAME} >/dev/null 2>&1; then
              echo "Creating network ${NETWORK_NAME}..."
              docker network create ${NETWORK_NAME}
            else
              echo "Network ${NETWORK_NAME} exists."
            fi
            
            # 컨테이너 실행
            docker run -d \
              --name ${CONTAINER_NAME} \
              --restart always \
              --network ${NETWORK_NAME} \
              -p ${APP_SERVER_PORT}:${APP_SERVER_PORT} \
              --env-file ./.env \
              "${IMAGE_PATH}:latest"
            
            # 실행 결과 확인
            CONTAINER_STATUS=$(docker ps -a --filter "name=${CONTAINER_NAME}" --format "{{.Status}}")
            echo "Container status: ${CONTAINER_STATUS}"
            
            # 로그 시작 부분 확인
            echo "Container logs:"
            docker logs ${CONTAINER_NAME} --tail 20
            
            echo "Deployment completed: $(date)"